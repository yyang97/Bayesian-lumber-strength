colMeans(EL2)
86 - 9 -76*0.4
46.6*2
76*0.4 + 90*0.1+95*0.5
-40/sqrt(125)
qnorm(-3,578)
qnorm(-3.578)
qnorm(-3.578,mean = 0, sd = 1)
?qnrom
?qnorm
pnorm(-3.578,mean = 0, sd = 1)
6.51-1.96*0.13
6.51+1.96*0.13
1.45-1.96*0.03
1.45 + 1.96*0.03
1.84 - 1.96*0.1
1.84 +\ 1.96*0.1
1.84 + 1.96*0.1
0.39 - 0.02\*0.1
0.39 - 0.02*0.1
0.39 + 0.02*0.1
0.75 + 0.2*0.1
0.75 - 0.2*0.1
0.39 - 0.02*1.96
0.39 + 0.02*1.96
0.75 + 0.2*1.96
0.75 - 0.2*1.96
2/0.016
0.4^2
2/0.16
?rnorm
qnorm(0.025)
qnorm(0.025)
qnorm(0.975)
qnorm(0.025,mean = 0, sd = sqrt(12.5))
qnorm(0.975,mean = 0, sd = sqrt(12.5))
-((-6.929)/10-0.027)
-((6.929)/10-0.027)
1
1111
2
1
1
2
install.packages("car")
install.packages("PerformanceAnalytics")
install.packages("quantmod")
install.packages("tseries")
install.packages("xts")
install.packages("zoo")
devtools::install_github("mlysy/flexEL")
require(rstan)
require(devtools)
install.packages("jsonlite", type = "source")
require(jsonlite)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
devtools::find_rtools()
install.packages("jsonlite", type = "source")
devtools::find_rtools()
devtools::install_github("mlysy/flexEL")
devtools::install_github("mlysy/flexEL")
devtools::install_github("mlysy/flexEL")
devtools::install_github("mlysy/flexEL")
devtools::install_github("mlysy/flexEL")
.libpaths()
R.Version()
install.packages("C:/Users/user/Desktop/flexEL_0.0.0.1.tar.gz", repos = NULL, type = "source")
install.packages("numDeriv")
install.packages("C:/Users/user/Desktop/flexEL_0.0.0.1.tar.gz", repos = NULL, type = "source")
a <- rnorm(100)
b <- a^2
cov(a,b)
a <- rnorm(1000)
cov(a,b)
b <- a^2
cov(a,b)
###------------------data preprocessing--------------
setwd("F:/study/Research/Bayesian-lumber-strength/Data")
require(rstan)
require(MASS)
install.packages("jsonlite", type = "source")
install.packages("jsonlite", type = "source")
install.packages("jsonlite", type = "source")
###------------------data preprocessing--------------
setwd("F:/study/Research/Bayesian-lumber-strength/Data")
library(readxl)
library(dplyr)
summary_all08122013 <- read_excel("summary_all08122013.xlsx")
summary_all08122013
summary_all08122013 <- select(summary_all08122013,"Group","Broken","MOR","UTS")
## T group
T100_data <-summary_all08122013[which(summary_all08122013$Group == "T100"),]
T60_data <-summary_all08122013[which(summary_all08122013$Group == "T60"),]
T40_data <-summary_all08122013[which(summary_all08122013$Group == "T40"),]
T20_data <-summary_all08122013[which(summary_all08122013$Group == "T20"),]
T100_data$UTS <- as.numeric(T100_data$UTS)
T100_data <- T100_data$UTS
## G group
R100_data <-summary_all08122013[which(summary_all08122013$Group == "R100"),]
R60_data <-summary_all08122013[which(summary_all08122013$Group == "R60"),]
R40_data <-summary_all08122013[which(summary_all08122013$Group == "R40"),]
R20_data <-summary_all08122013[which(summary_all08122013$Group == "R20"),]
R100_data <-as.numeric(R100_data$MOR)
R100_data
##-----------------T substitute NA to 0 -----------
id <- T60_data$Broken == 1
T60_data$MOR[id] <- 0
T60_data$UTS[id] <- as.numeric(T60_data$UTS[id])
T60_data$UTS[!id] <- 0
T60_data$UTS <- as.numeric(T60_data$UTS)
T60_data$MOR <- as.numeric(T60_data$MOR)
id <- T40_data$Broken == 1
T40_data$MOR[id] <- 0
T40_data$UTS[id] <- as.numeric(T40_data$UTS[id])
T40_data$UTS[!id] <- 0
T40_data$UTS <- as.numeric(T40_data$UTS)
T40_data$MOR <- as.numeric(T40_data$MOR)
id <- T20_data$Broken == 1
T20_data$MOR[id] <- 0
T20_data$UTS[id] <- as.numeric(T20_data$UTS[id])
T20_data$UTS[!id] <- 0
T20_data$UTS <- as.numeric(T20_data$UTS)
T20_data$MOR <- as.numeric(T20_data$MOR)
##-----------------R substitute NA to 0 ------
id <- R60_data$Broken == 0
R60_data$MOR[id] <- 0
R60_data$UTS[id] <- as.numeric(R60_data$UTS[id])
R60_data$UTS[!id] <- 0
R60_data$UTS <- as.numeric(R60_data$UTS)
R60_data$MOR <- as.numeric(R60_data$MOR)
id <- R40_data$Broken == 0
R40_data$MOR[id] <- 0
R40_data$UTS[id] <- as.numeric(R40_data$UTS[id])
R40_data$UTS[!id] <- 0
R40_data$UTS <- as.numeric(R40_data$UTS)
R40_data$MOR <- as.numeric(R40_data$MOR)
id <- R20_data$Broken == 0
R20_data$MOR[id] <- 0
R20_data$UTS[id] <- as.numeric(R20_data$UTS[id])
R20_data$UTS[!id] <- 0
R20_data$UTS <- as.numeric(R20_data$UTS)
R20_data$MOR <- as.numeric(R20_data$MOR)
##---------------Convert psi to Mpa------------
# 1 thousand psi = 6.895 MPa
c = 6.895
R20_data$MOR <- c*R20_data$MOR
R20_data$UTS <- c*R20_data$UTS
R40_data$MOR <- c*R40_data$MOR
R40_data$UTS <- c*R40_data$UTS
R60_data$MOR <- c*R60_data$MOR
R60_data$UTS <- c*R60_data$UTS
R100_data <- c*R100_data
T20_data$MOR <- c*T20_data$MOR
T20_data$UTS <- c*T20_data$UTS
T40_data$MOR <- c*T40_data$MOR
T40_data$UTS <- c*T40_data$UTS
T60_data$MOR <- c*T60_data$MOR
T60_data$UTS <- c*T60_data$UTS
T100_data <- c*T100_data
##-------check normal fitting---------
library(fitdistrplus)
# check R100_data
FIT <- fitdist(R100_data, "norm")    ## note: it is "norm" not "normal"
plot(FIT)    ## use method `plot.fitdist`
FIT$estimate # mean = 45.679 sd = 12.900
FIT$bic # bic = 1394.022
# good normal fitting
# check T100_data
shapiro.test(T100_data) # p = 0.0001841
shapiro.test(log(T100_data)) # p-value = 0.002327
shapiro.test(sqrt(T100_data)) # p-value = 0.3988
##------proof loading--------------
R_pf =c* c(4.956690733, 6.110714122, 7.092435407)
T_pf =sqrt(c* c(2.962390379, 3.986497991, 4.916102264))
##--------convert UTS to sqrt(UTS)
R20_data$UTS <- sqrt(R20_data$UTS)
R40_data$UTS <- sqrt(R40_data$UTS)
R60_data$UTS <- sqrt(R60_data$UTS)
R100_data <- R100_data
T20_data$UTS <- sqrt(T20_data$UTS)
T40_data$UTS <- sqrt(T40_data$UTS)
T60_data$UTS <- sqrt(T60_data$UTS)
T100_data <- sqrt(T100_data)
##-----check outlier and delete it-------
# R20
id <- which((R20_data$MOR < R_pf[1]) == F)
R20_data <- R20_data[-id,]
# R40
id <- which((R40_data$MOR < R_pf[2]) == F)
# R60
id <- which((R60_data$MOR < R_pf[3]) == F)
R60_data <- R60_data[-id,]
# T20
id <- which((T20_data$UTS < T_pf[1]) == F)
T20_data <- T20_data[-id,]
# T40
id <- which((T40_data$UTS < T_pf[2]) == F)
T40_data <- T40_data[-id,]
# T60
id <- which((T60_data$UTS < T_pf[3]) == F)
T60_data <- T60_data[-id,]
##---- Convert the data so stan can use it -----
R20_data <- cbind(R20_data$MOR,R20_data$UTS,R20_data$Broken)
R40_data <- cbind(R40_data$MOR,R40_data$UTS,R40_data$Broken)
R60_data <- cbind(R60_data$MOR,R60_data$UTS,R60_data$Broken)
T20_data <- cbind(T20_data$UTS,T20_data$MOR,T20_data$Broken)
T40_data <- cbind(T40_data$UTS,T40_data$MOR,T40_data$Broken)
T60_data <- cbind(T60_data$UTS,T60_data$MOR,T60_data$Broken)
nondmg_mod <- stan_model("nondamage.stan")
init_nondmg <- function() {
list(mu = c(35,8), sigma = c(10,1), rho = .5)
}
nondmg_fit <- sampling(object = nondmg_mod,
data = list(N_R20 = nrow(R20_data),N_R40 = nrow(R40_data),N_R60 = nrow(R60_data),
N_T20 = nrow(T20_data),N_T40 = nrow(T40_data),N_T60 = nrow(T60_data),
N_x = length(T100_data),N_y = length(R100_data),
X_R20 = R20_data,X_R40 = R40_data,X_R60 = R60_data,
X_T20 = T20_data,X_T40 = T40_data,X_T60 = T60_data,
t_x = R100_data,t_y = T100_data,
l_R20=R_pf[1],l_R40=R_pf[2],l_R60=R_pf[3],
l_T20=T_pf[1],l_T40=T_pf[2],l_T60=T_pf[3]),
control = list(adapt_delta = 0.8),init = init_nondmg)
print(nondmg_fit,pars = c('mu','sigma','rho'))
# LOOIC
loo_nondamage <- loo(nondmg_fit)
##------ Stan for all alpha-------------
setwd("F:/study/Research/Bayesian-lumber-strength/R/Real data analysis")
nondmg_mod <- stan_model("nondamage.stan")
init_nondmg <- function() {
list(mu = c(35,8), sigma = c(10,1), rho = .5)
}
nondmg_fit <- sampling(object = nondmg_mod,
data = list(N_R20 = nrow(R20_data),N_R40 = nrow(R40_data),N_R60 = nrow(R60_data),
N_T20 = nrow(T20_data),N_T40 = nrow(T40_data),N_T60 = nrow(T60_data),
N_x = length(T100_data),N_y = length(R100_data),
X_R20 = R20_data,X_R40 = R40_data,X_R60 = R60_data,
X_T20 = T20_data,X_T40 = T40_data,X_T60 = T60_data,
t_x = R100_data,t_y = T100_data,
l_R20=R_pf[1],l_R40=R_pf[2],l_R60=R_pf[3],
l_T20=T_pf[1],l_T40=T_pf[2],l_T60=T_pf[3]),
control = list(adapt_delta = 0.8),init = init_nondmg)
print(nondmg_fit,pars = c('mu','sigma','rho'))
# LOOIC
loo_nondamage <- loo(nondmg_fit)
rstan:::rstudio_stanc("only_alphaR40.stan")
rstan:::rstudio_stanc("only_alphaR40.stan")
rstan:::rstudio_stanc("only_alphaR40.stan")
##----------------model with only R40----------------------------------
R40dmg_mod <- stan_model("only_alphaR40.stan")
init_R40dmg <- function() {
list(mu = c(35,8), sigma = c(10,1), rho = .5, alpha_R40 = 1,)
}
R40dmg_fit <- sampling(object = R40dmg_mod,
data = list(N_R20 = nrow(R20_data),N_R40 = nrow(R40_data),N_R60 = nrow(R60_data),
N_T20 = nrow(T20_data),N_T40 = nrow(T40_data),N_T60 = nrow(T60_data),
N_x = length(T100_data),N_y = length(R100_data),
X_R20 = R20_data,X_R40 = R40_data,X_R60 = R60_data,
X_T20 = T20_data,X_T40 = T40_data,X_T60 = T60_data,
t_x = R100_data,t_y = T100_data,
l_R20=R_pf[1],l_R40=R_pf[2],l_R60=R_pf[3],
l_T20=T_pf[1],l_T40=T_pf[2],l_T60=T_pf[3]),
control = list(adapt_delta = 0.8),init = init_nondmg)
print(R40dmg_fit,pars = c('mu','sigma','rho','alpha_R40'))
loo_R40damage <- loo(R40dmg_fit)
##
loo_compare(loo_R40dmg, loo_nondamage)
require(loo)
##
loo_compare(loo_R40dmg, loo_nondamage)
loo_R40dmg <- loo(R40dmg_fit)
##
loo_compare(loo_R40dmg, loo_nondamage)
require(rstan)
require(MASS)
require(loo)
install.packages("jsonlite", type = "source")
devtools::find_rtools()
install.packages("jsonlite", type = "source")
###------------------data preprocessing--------------
setwd("F:/study/Research/Bayesian-lumber-strength/Data")
library(readxl)
library(dplyr)
summary_all08122013 <- read_excel("summary_all08122013.xlsx")
summary_all08122013
summary_all08122013 <- select(summary_all08122013,"Group","Broken","MOR","UTS")
## T group
T100_data <-summary_all08122013[which(summary_all08122013$Group == "T100"),]
T60_data <-summary_all08122013[which(summary_all08122013$Group == "T60"),]
T40_data <-summary_all08122013[which(summary_all08122013$Group == "T40"),]
T20_data <-summary_all08122013[which(summary_all08122013$Group == "T20"),]
T100_data$UTS <- as.numeric(T100_data$UTS)
T100_data <- T100_data$UTS
## G group
R100_data <-summary_all08122013[which(summary_all08122013$Group == "R100"),]
R60_data <-summary_all08122013[which(summary_all08122013$Group == "R60"),]
R40_data <-summary_all08122013[which(summary_all08122013$Group == "R40"),]
R20_data <-summary_all08122013[which(summary_all08122013$Group == "R20"),]
R100_data <-as.numeric(R100_data$MOR)
R100_data
##-----------------T substitute NA to 0 -----------
id <- T60_data$Broken == 1
T60_data$MOR[id] <- 0
T60_data$UTS[id] <- as.numeric(T60_data$UTS[id])
T60_data$UTS[!id] <- 0
T60_data$UTS <- as.numeric(T60_data$UTS)
T60_data$MOR <- as.numeric(T60_data$MOR)
id <- T40_data$Broken == 1
T40_data$MOR[id] <- 0
T40_data$UTS[id] <- as.numeric(T40_data$UTS[id])
T40_data$UTS[!id] <- 0
T40_data$UTS <- as.numeric(T40_data$UTS)
T40_data$MOR <- as.numeric(T40_data$MOR)
id <- T20_data$Broken == 1
T20_data$MOR[id] <- 0
T20_data$UTS[id] <- as.numeric(T20_data$UTS[id])
T20_data$UTS[!id] <- 0
T20_data$UTS <- as.numeric(T20_data$UTS)
T20_data$MOR <- as.numeric(T20_data$MOR)
##-----------------R substitute NA to 0 ------
id <- R60_data$Broken == 0
R60_data$MOR[id] <- 0
R60_data$UTS[id] <- as.numeric(R60_data$UTS[id])
R60_data$UTS[!id] <- 0
R60_data$UTS <- as.numeric(R60_data$UTS)
R60_data$MOR <- as.numeric(R60_data$MOR)
id <- R40_data$Broken == 0
R40_data$MOR[id] <- 0
R40_data$UTS[id] <- as.numeric(R40_data$UTS[id])
R40_data$UTS[!id] <- 0
R40_data$UTS <- as.numeric(R40_data$UTS)
R40_data$MOR <- as.numeric(R40_data$MOR)
id <- R20_data$Broken == 0
R20_data$MOR[id] <- 0
R20_data$UTS[id] <- as.numeric(R20_data$UTS[id])
R20_data$UTS[!id] <- 0
R20_data$UTS <- as.numeric(R20_data$UTS)
R20_data$MOR <- as.numeric(R20_data$MOR)
##---------------Convert psi to Mpa------------
# 1 thousand psi = 6.895 MPa
c = 6.895
R20_data$MOR <- c*R20_data$MOR
R20_data$UTS <- c*R20_data$UTS
R40_data$MOR <- c*R40_data$MOR
R40_data$UTS <- c*R40_data$UTS
R60_data$MOR <- c*R60_data$MOR
R60_data$UTS <- c*R60_data$UTS
R100_data <- c*R100_data
T20_data$MOR <- c*T20_data$MOR
T20_data$UTS <- c*T20_data$UTS
T40_data$MOR <- c*T40_data$MOR
T40_data$UTS <- c*T40_data$UTS
T60_data$MOR <- c*T60_data$MOR
T60_data$UTS <- c*T60_data$UTS
T100_data <- c*T100_data
##-------check normal fitting---------
library(fitdistrplus)
# check R100_data
FIT <- fitdist(R100_data, "norm")    ## note: it is "norm" not "normal"
plot(FIT)    ## use method `plot.fitdist`
FIT$estimate # mean = 45.679 sd = 12.900
FIT$bic # bic = 1394.022
# good normal fitting
# check T100_data
shapiro.test(T100_data) # p = 0.0001841
shapiro.test(log(T100_data)) # p-value = 0.002327
shapiro.test(sqrt(T100_data)) # p-value = 0.3988
##------proof loading--------------
R_pf =c* c(4.956690733, 6.110714122, 7.092435407)
T_pf =sqrt(c* c(2.962390379, 3.986497991, 4.916102264))
##--------convert UTS to sqrt(UTS)
R20_data$UTS <- sqrt(R20_data$UTS)
R40_data$UTS <- sqrt(R40_data$UTS)
R60_data$UTS <- sqrt(R60_data$UTS)
R100_data <- R100_data
T20_data$UTS <- sqrt(T20_data$UTS)
T40_data$UTS <- sqrt(T40_data$UTS)
T60_data$UTS <- sqrt(T60_data$UTS)
T100_data <- sqrt(T100_data)
##-----check outlier and delete it-------
# R20
id <- which((R20_data$MOR < R_pf[1]) == F)
R20_data <- R20_data[-id,]
# R40
id <- which((R40_data$MOR < R_pf[2]) == F)
# R60
id <- which((R60_data$MOR < R_pf[3]) == F)
R60_data <- R60_data[-id,]
# T20
id <- which((T20_data$UTS < T_pf[1]) == F)
T20_data <- T20_data[-id,]
# T40
id <- which((T40_data$UTS < T_pf[2]) == F)
T40_data <- T40_data[-id,]
# T60
id <- which((T60_data$UTS < T_pf[3]) == F)
T60_data <- T60_data[-id,]
##---- Convert the data so stan can use it -----
R20_data <- cbind(R20_data$MOR,R20_data$UTS,R20_data$Broken)
R40_data <- cbind(R40_data$MOR,R40_data$UTS,R40_data$Broken)
R60_data <- cbind(R60_data$MOR,R60_data$UTS,R60_data$Broken)
T20_data <- cbind(T20_data$UTS,T20_data$MOR,T20_data$Broken)
T40_data <- cbind(T40_data$UTS,T40_data$MOR,T40_data$Broken)
T60_data <- cbind(T60_data$UTS,T60_data$MOR,T60_data$Broken)
##------data preprocessing completed -----
##------ Stan for all alpha-------------
setwd("F:/study/Research/Bayesian-lumber-strength/R/Real data analysis")
R40dmg_mod <- stan_model("only_alphaR40_real.stan")
init_R40dmg <- function() {
list(mu = c(35,8), sigma = c(10,1), rho = .5, alpha_R40 = 1)
}
R40dmg_fit <- sampling(object = R40dmg_mod,
data = list(N_R20 = nrow(R20_data),N_R40 = nrow(R40_data),N_R60 = nrow(R60_data),
N_T20 = nrow(T20_data),N_T40 = nrow(T40_data),N_T60 = nrow(T60_data),
N_x = length(T100_data),N_y = length(R100_data),
X_R20 = R20_data,X_R40 = R40_data,X_R60 = R60_data,
X_T20 = T20_data,X_T40 = T40_data,X_T60 = T60_data,
t_x = R100_data,t_y = T100_data,
l_R20=R_pf[1],l_R40=R_pf[2],l_R60=R_pf[3],
l_T20=T_pf[1],l_T40=T_pf[2],l_T60=T_pf[3]),
control = list(adapt_delta = 0.8),init = init_R40dmg)
print(R40dmg_fit,pars = c('mu','sigma','rho','alpha_R40'))
pairs(R40dmg_fit,pars = c('mu','sigma','rho','alpha_R40'))
dmg_mod <- stan_model("damage_real.stan")
init_dmg <- function() {
list(mu = c(35,8), sigma = c(10,1), rho = .5, alpha_R20 = 1,
alpha_R40 = 1,alpha_R60 = 1,alpha_T20 = 1,alpha_T40 =1,alpha_R60 = 1 )
}
dmg_fit <- sampling(object = dmg_mod,
data = list(N_R20 = nrow(R20_data),N_R40 = nrow(R40_data),N_R60 = nrow(R60_data),
N_T20 = nrow(T20_data),N_T40 = nrow(T40_data),N_T60 = nrow(T60_data),
N_x = length(T100_data),N_y = length(R100_data),
X_R20 = R20_data,X_R40 = R40_data,X_R60 = R60_data,
X_T20 = T20_data,X_T40 = T40_data,X_T60 = T60_data,
t_x = R100_data,t_y = T100_data,
l_R20=R_pf[1],l_R40=R_pf[2],l_R60=R_pf[3],
l_T20=T_pf[1],l_T40=T_pf[2],l_T60=T_pf[3]),
control = list(adapt_delta = 0.8),init = init_dmg)
print(dmg_fit,pars = c('mu','sigma','rho','alpha_R20','alpha_R40',
'alpha_R60','alpha_T20','alpha_T40','alpha_T60'))
pairs(dmg_fit,pars = c('rho','alpha_R20','alpha_R40',
'alpha_R60','alpha_T20','alpha_T40','alpha_T60'))
N_R20
R20_data
T20_data
R20_data
save.image("F:/study/Research/Bayesian-lumber-strength/R/Real data analysis/fitting2.RData")
###------------------data preprocessing--------------
setwd("F:/study/Research/Bayesian-lumber-strength/Data")
summary_all08122013 <- read_excel("summary_all08122013.xlsx")
summary_all08122013
summary_all08122013 <- select(summary_all08122013,"Group","Broken","MOR","UTS")
## T group
T100_data <-summary_all08122013[which(summary_all08122013$Group == "T100"),]
T60_data <-summary_all08122013[which(summary_all08122013$Group == "T60"),]
T40_data <-summary_all08122013[which(summary_all08122013$Group == "T40"),]
T20_data <-summary_all08122013[which(summary_all08122013$Group == "T20"),]
T100_data$UTS <- as.numeric(T100_data$UTS)
T100_data <- T100_data$UTS
## G group
R100_data <-summary_all08122013[which(summary_all08122013$Group == "R100"),]
R60_data <-summary_all08122013[which(summary_all08122013$Group == "R60"),]
R40_data <-summary_all08122013[which(summary_all08122013$Group == "R40"),]
R20_data <-summary_all08122013[which(summary_all08122013$Group == "R20"),]
R100_data <-as.numeric(R100_data$MOR)
R100_data
id <- T60_data$Broken == 1
T60_data$MOR[id] <- 0
T60_data$UTS[id] <- as.numeric(T60_data$UTS[id])
T60_data$UTS[!id] <- 0
T60_data$UTS <- as.numeric(T60_data$UTS)
T60_data$MOR <- as.numeric(T60_data$MOR)
id <- T40_data$Broken == 1
T40_data$MOR[id] <- 0
T40_data$UTS[id] <- as.numeric(T40_data$UTS[id])
T40_data$UTS[!id] <- 0
T40_data$UTS <- as.numeric(T40_data$UTS)
T40_data$MOR <- as.numeric(T40_data$MOR)
id <- T20_data$Broken == 1
T20_data$MOR[id] <- 0
T20_data$UTS[id] <- as.numeric(T20_data$UTS[id])
T20_data$UTS[!id] <- 0
T20_data$UTS <- as.numeric(T20_data$UTS)
T20_data$MOR <- as.numeric(T20_data$MOR)
id <- R60_data$Broken == 0
R60_data$MOR[id] <- 0
R60_data$UTS[id] <- as.numeric(R60_data$UTS[id])
R60_data$UTS[!id] <- 0
R60_data$UTS <- as.numeric(R60_data$UTS)
R60_data$MOR <- as.numeric(R60_data$MOR)
id <- R40_data$Broken == 0
R40_data$MOR[id] <- 0
R40_data$UTS[id] <- as.numeric(R40_data$UTS[id])
R40_data$UTS[!id] <- 0
R40_data$UTS <- as.numeric(R40_data$UTS)
R40_data$MOR <- as.numeric(R40_data$MOR)
id <- R20_data$Broken == 0
R20_data$MOR[id] <- 0
R20_data$UTS[id] <- as.numeric(R20_data$UTS[id])
R20_data$UTS[!id] <- 0
R20_data$UTS <- as.numeric(R20_data$UTS)
R20_data$MOR <- as.numeric(R20_data$MOR)
R20_data
R20_data$UTS
R20_data$MOR
c*R20_data$MOR
c*R20_data$UTS
c*T100_data
=sqrt(c* c(2.962390379, 3.986497991, 4.916102264))
sqrt(c* c(2.962390379, 3.986497991, 4.916102264))
c = 6.895
c* c(4.956690733, 6.110714122, 7.092435407)
sqrt(c* c(2.962390379, 3.986497991, 4.916102264))
